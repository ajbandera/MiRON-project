//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
//
//  Copyright (C)	2018 Matthias Lutz
//
//      ZAFH Servicerobotic Ulm
//      Christian Schlegel
//      University of Applied Sciences
//      Prittwitzstr. 10
//      89075 Ulm
//      Germany
//
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//--------------------------------------------------------------------------


#include "SkillExecutionTask.hh"
#include "ComponentSkillInterface.hh"

#include <iostream>

#include <QtCore>

SkillExecutionTask::SkillExecutionTask(SmartACE::SmartComponent *comp) 
:	SkillExecutionTaskCore(comp)
{
	std::cout << "constructor SkillExecutionTask\n";
	shutdown = false;
}
SkillExecutionTask::~SkillExecutionTask() 
{
	std::cout << "destructor SkillExecutionTask\n";
}

void SkillExecutionTask::unblockToShutdown(){
	std::cout<<"["<<__FUNCTION__<<"] "<<std::endl;

	shutdown = true;
	cond.notify_one();
}

void SkillExecutionTask::pushMsg(std::string msg){
	std::unique_lock<std::mutex> lock(msgMutex);
	msgQueue.push(msg);
	lock.unlock();
	cond.notify_one();
}

std::string SkillExecutionTask::popMsg(){
	std::string res;
	if(shutdown == true){
		res = "";
		return res;
	}
	std::unique_lock<std::mutex> lock(msgMutex);
	while (msgQueue.empty())
	{
			cond.wait(lock);
	}
	if(shutdown == true){
		std::cout<<"["<<__FUNCTION__<<"] "<<"Shutdown case"<<std::endl;
		res = "";
	} else {
		res = this->msgQueue.front();
		this->msgQueue.pop();
	}
	return res;
}

int SkillExecutionTask::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	return 0;
}

int SkillExecutionTask::on_execute()
{
	// this method is called from an outside loop,
	// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
	// also do not use blocking calls which do not result from smartsoft kernel
	
	// to get the incoming data, use this methods:
	Smart::StatusCode status;


//	std::cout<<"["<<__FUNCTION__<<"] "<<"wait for msg"<<std::endl;
	std::string inputMSG = this->popMsg();
	std::cout<<"[SkillExecutionTask] "<<"got msg: "<<inputMSG<<std::endl;

	QJsonParseError error;

	QString line = QString::fromUtf8(inputMSG.c_str());
	QJsonDocument doc = QJsonDocument::fromJson(line.toUtf8(),&error);

	if(QJsonParseError::NoError != error.error)
	{
		std::cout<< "error: parsing json error:" << error.errorString().toStdString()<<std::endl;
		return 0;
	}

	QJsonObject root = doc.object();

	QString msgType = root["msg-type"].toString();


/////////////////////////////
//P U S H    S K I L L
/////////////////////////////

	if(msgType == "push-skill")
	{
//		{ "msg-type" : "push-skill" , "id" : 1, "skill" : { "name" : "moverobot", "skillDefinitionFQN" : "CommNavigationObjects.CdlSkills.moverobot", "in-attribute" : { "location" : 1 }, "out-attribute" : { }}}

/// READ THE SKILL AS A JSON

		int id = root["id"].toInt();

		QJsonObject jsonSKILL = root["skill"].toObject();

		QString skillName = jsonSKILL["name"].toString();
		QString skillDefinitionFQN = jsonSKILL["skill-definition-fqn"].toString();

		QJsonObject jsonINATTRIB = jsonSKILL["in-attribute"].toObject();
		QJsonObject jsonOUTATTRIB =jsonSKILL["out-attribute"].toObject();

/// READ THE A-PRIORI UNKNOWN LIST OF INPUT PARAMETERS

		// Maximum 3 input parameters (set on the KB definition of a skill)
		std::string IN[3] = {"NIL","NIL","NIL"};

		std::cout << "IN -----> Size : " << jsonINATTRIB.size() << std::endl;

		QJsonObject::iterator i;
		int cont = 0;
		for (i = jsonINATTRIB.begin(); i != jsonINATTRIB.end(); ++i)
			{
		    std::cout << "IN ---> Key : " << i.key().toStdString();
		    QJsonValue jsonvalue = i.value();
		    if (jsonvalue.isString() == true)
		    	{
		    	std::cout << " --> Value : " << jsonvalue.toString().toStdString() << std::endl;
		    	IN[cont]= jsonvalue.toString().toStdString();
		    	}
		    else if (jsonvalue.isDouble() == true)
		    		{
		    		std::cout << " --> Value : " << jsonvalue.toDouble() << std::endl;
		    		IN[cont]= std::to_string(jsonvalue.toDouble());
		    		}
		    	else
		    		{
		    		std::cout << " --> Value : " << jsonvalue.toInt() << std::endl;
		    		IN[cont]= std::to_string(jsonvalue.toInt());
		    		}
		    cont++;
			}

/// READ THE A-PRIORI UNKNOWN LIST OF OUTPUT PARAMETERS

		// Maximum 3 input parameters (set on the KB definition of a skill)
		std::string OUT[3] = {"NIL","NIL","NIL"};

		std::cout << "OUT-----> Size : " << jsonOUTATTRIB.size() << std::endl;

		cont = 0;
		for (i = jsonOUTATTRIB.begin(); i != jsonOUTATTRIB.end(); ++i)
			{
			std::cout << "---> Key : " << i.key().toStdString() << std::endl;
			QJsonValue jsonvalue = i.value();
			if (jsonvalue.isString() == true)
				{
				std::cout << "-----> Value : " << jsonvalue.toString().toStdString() << std::endl;
				OUT[cont]= jsonvalue.toString().toStdString();
				}
			else if (jsonvalue.isDouble() == true)
			 		{
			   		std::cout << "-----> Value : " << jsonvalue.toDouble() << std::endl;
			   		OUT[cont]= std::to_string(jsonvalue.toDouble());
			   		}
			   	else
			   		{
			   		std::cout << "-----> Value : " << jsonvalue.toInt() << std::endl;
			   		OUT[cont]= std::to_string(jsonvalue.toInt());
			   		}
			cont++;
			}

//////////////////////////////////////////////////////////////////////
// Updating the SKILL on the KB - its execution will be addressed by the Sequencer

		std::string message;
		CommBasicObjects::CommKBRequest request;
		CommBasicObjects::CommKBResponse answer;

		//message = "(KB-UPDATE :KEY '(IS-A) :VALUE '((IS-A SKILL)(NAME "+skillName.toStdString()+")(id "+std::to_string(id)+")(IN_1 "+IN[0]+")(IN_2 "+IN[1]+")(IN_3 "+IN[2]+")(OUT_1 "+OUT[0]+")(OUT_2 "+OUT[1]+")(OUT_3 "+OUT[2]+")))";

		message = "(KB-UPDATE :KEY '(IS-A) :VALUE '((IS-A SKILL)(NAME "+skillName.toStdString()+")(IN_1 "+IN[0]+")(IN_2 "+IN[1]+")(IN_3 "+IN[2]+")(OUT_1 "+OUT[0]+")(OUT_2 "+OUT[1]+")(OUT_3 "+OUT[2]+")))";
		request.setRequest(message);
		std::cout<<"Petition to the KB for updating the skill"<<std::endl;
		COMP->kBQueryClient->query(request,answer);
		std::cout<<"Got KB Query Answer: "<<answer.getResponse()<<std::endl;
/////////////////////////////////////////////////////////////////////////////////

		std::cout<<"[SkillExecutionTask]"<<" EXECSKILL - id: "<<id<<" name: "<<skillName.toStdString()<<" fqn: "<< skillDefinitionFQN.toStdString() << std::endl;



//////////////////////////////////////////////////////////////////////
// Querying the SKILL from the KB - when its execution finishes, the SEQUENCER sets the name of the skill_result on the KB with the name of the executed skill

		message = "(KB-QUERY :KEY '(IS-A) :VALUE '((IS-A SKILL_RESULT)) )";
		std::string answer_msg;
		std::string skill_name_str = skillName.toStdString();
		std::transform(skill_name_str.begin(), skill_name_str.end(),skill_name_str.begin(), ::toupper);
		std::size_t found;

		std::cout<<"Waiting for skill execution..."<<std::endl;
		do // If name == NIL -> the skill is under execution !!!!!!!!!!!!!usar find para buscar skillName: mientras no este es que no se ha cerrado su ejecucion http://www.cplusplus.com/reference/string/string/find/
		{
			request.setRequest(message);
			//std::cout<<"Petition to the KB for querying the skill_result"<<std::endl;
			COMP->kBQueryClient->query(request,answer);
			answer_msg = answer.getResponse();
			//std::cout<<"Got KB Query Answer: "<<answer_msg<<std::endl;
			found = answer_msg.find(skill_name_str);
			//std::cout <<"... find: " << skill_name_str << std::endl;
		}
		while (found == std::string::npos);
/////////////////////////////////////////////////////////////////////////////////

		message = "(KB-UPDATE :KEY '(IS-A) :VALUE '((IS-A SKILL_RESULT)(NAME NIL)) )";
		request.setRequest(message);
		std::cout<<"Petition to the KB for updating the skill_result to NIL"<<std::endl;
		COMP->kBQueryClient->query(request,answer);
		std::cout<<"Got KB Query Answer: "<<answer.getResponse()<<std::endl;

/////////////////////////////////////////////////////////////////////////////////

		//return 0; /////////
		{

//		{ "msg-type" : "skill-result" , "id" : 1 , "result" : { "result" : "SUCCESS", "result-value" : "OK" }}



		QJsonObject root;
		QJsonObject result;
		root["msg-type"] = "skill-result";
		root["id"] = id;
		result["result"] = "SUCCESS";
		result["result-value"] = "OK";
		root["result"] = result;
		QJsonDocument answer(root);

		QString jsonAnsw = answer.toJson(QJsonDocument::Compact);
		COMP->com->send(jsonAnsw.toStdString());

		}



	/////////////////////////////
	//A B O R  T    S K I L L
	/////////////////////////////

	} else if (msgType == "abort-current-running-skill"){

//		{ "msg-type" : "abort-current-running-skill" }

		std::cout<<"[SkillExecutionTask]"<<" abort current running skill"<<std::endl;

		{
//		{ "msg-type" : "abort-current-running-skill-result", "result" : "SUCCESS"}

		QJsonObject root;
		root["msg-type"] = "abort-current-running-skill-result";
		root["result"] = "SUCCESS";
		QJsonDocument answer(root);

		QString jsonAnsw = answer.toJson(QJsonDocument::Compact);
		COMP->com->send(jsonAnsw.toStdString());

		}

		//{ "msg-type" : "abort-current-running-skill" }

		//TODO impl abort current skill

	} else if (msgType == "abort-skill"){

//		{ "msg-type" : "abort-skill" , "id" : 2 }
		int id = root["id"].toInt();

		std::cout<<"[SkillExecutionTask]"<<" abort skill id: "<<id<<std::endl;

		//TODO impl abort skill

		{
//		{ "msg-type" : "abort-skill-result", "id" : 2, "result" : "SUCCESS"}

		QJsonObject root;
		root["msg-type"] = "abort-skill-result";
		root["id"] = id;
		root["result"] = "SUCCESS";
		QJsonDocument answer(root);

		QString jsonAnsw = answer.toJson(QJsonDocument::Compact);
		COMP->com->send(jsonAnsw.toStdString());
		}


	} else {
		std::cout<<"Other msg type found --> skip"<<std::endl;
	}

	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}
int SkillExecutionTask::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}
